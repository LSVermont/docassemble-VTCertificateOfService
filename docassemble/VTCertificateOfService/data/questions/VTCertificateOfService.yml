#Note: For this stand-alone interview, either plaintiff or defendant can fill it out.
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.VTSharedYMLFile:VTSharedYMLFile.yml
---
modules:
  - docassemble.demo.accordion
---
metadata:
  title: >-
    Certificate of Service
  short title: >-
    Certificate of Service
  description: |-
    This interview helps someone in Vermont fill out a Certificate of Service court form. Based on paper version 600-00264 Certificate of Service (12/2015).
  tags:
    - "FA-06-00-00-00"
  authors:
    - Legal Services Vermont
  original_form:
    - https://vtlawhelp.org/roadmap/divorce/step-3
  help_page_url: >-
    https://vtlawhelp.org/roadmap/divorce/step-3
  help_page_title: >-
    Divorce Roadmap on VTLawHelp.org
  #typical_role: "plaintiff"
  al_weaver_version: "1.10.3"
  generated_on: "2024-02-22"
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "VT"
---
code: |
  github_repo_name =  'docassemble-Vtcertificateofservice'
---
code: |
  interview_short_title = "Fill out a Certificate of Service form in Vermont"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - other_parties: ALPeopleList.using(ask_number=True, complete_attribute='served')
  - other_people_receiving_service: DAList.using(object_type=Thing, ask_number=True, complete_attribute='complete')
  
---
code: |
  other_people_receiving_service[i].method
  other_people_receiving_service[i].complete = True
---
# customized feedback form
code: |   
  feedback_form = "docassemble.VTFeedback:VTfeedback.yml"
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_VTCertificateOfService
code: |
  nav.set_section("about")
  users1_role
  set_progress(10)

  other_parties.gather()
  set_progress(20)
  other_people_receiving_service.gather()
  set_progress(30)
  
  users.gather()
  user_has_attorney
    
  set_progress(40)
  nav.set_section("documents_served")
  docket_number
  trial_court_division
  set_progress(50)
  divorcesc
  set_progress(70)
  document1_name
  signature_date
  #Needed to add trial court county below so it would be defined before previewing forms. The index had been defined but not the county.
  trial_court.address.county
  set_progress(80)
  nav.set_section("review")
  VTCertificateOfService_preview_question
  set_progress(90)
  nav.set_section("sign")
  al_form_requires_digital_signature = False
  basic_questions_signature_flow 
  interview_order_VTCertificateOfService = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  nav.set_section("intro")
  al_intro_screen
  VTCertificateOfService_intro
  interview_order_VTCertificateOfService
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  set_progress(100)
  nav.set_section("get_docs")
  VTCertificateOfService_download
---
sections:
  - intro: Introduction
  - about: About you and the other party
  - documents_served: Documents being served
  - review: Edit your answers
  - sign: Signature
  - get_docs: Get your documents
---
id: basic questions intro screen
decoration: form-lineal
question: |
  **${interview_short_title}**
subquestion: |  

  <p>${ intro_vtcourtforms_3_steps }</p>
  
  <i class="fas fa-file-text fa-2x"></i> This interview produces the Certificate of Service - form 600-00264. It's used in many kinds of court cases to show the court that you "served" documents (sent them or delivered them) to the other party in your case.
  
  Before you start, be sure you have:
  
  * the names and address of the other party, or their lawyer if they have one
  * the names of the documents or forms you are sending or have sent.
  
  <i class="fas fa-clock fa-2x"></i> It may take you 10 minutes to complete this interview.
  
  <i class="fas fa-circle-info fa-2x"></i> It is free to use this program. This site is not a lawyer. Visit our [VTLawHelp.org website](https://vtlawhelp.org/roadmap/divorce/step-1) for more information about divorce, separation, or civil union dissolution.

  <p>${ intro_vtcourtforms_created_by }</p>

fields:
  - To continue, please accept our [terms of use](https://vtlawhelp.org/vlh-privacy).: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: al_intro_screen
---
id: users role
question: |
  Your role
fields:
  - "What is your role in this case?": users1_role
    input type: radio
    choices:
    - You are the 'Plaintiff,' which means you started the case: role_plaintiff
    - You are the 'Defendant,' which means you did not start the case but are responding to it: role_defendant
---
comment: |
  This question is used to introduce your interview. Please customize
id: Certificate_of_Service
continue button field: VTCertificateOfService_intro
question: |
  Certificate of Service
subquestion: |
  This interview will help you fill out a Certificate of Service form in Vermont.
  
  It's important to know the rules for sending or delivering documents for your kind of case.
  
  * For family court cases: [Read about serving papers for divorce and dissolution.](https://www.vermontjudiciary.org/family/divorce/serving-papers)
  
  * For civil court cases: [Read about serving papers on landlord-tenant cases](https://www.vermontjudiciary.org/civil/landlord-tenant) and [small claims cases](https://www.vermontjudiciary.org/civil/suing-and-being-sued) and [other civil cases](https://www.vermontjudiciary.org/civil).
  
  * If you are not sure, ask the [clerk at your local court.](https://www.vermontjudiciary.org/court-locations)

---
id: choose a court
question: |
  Choose a court
fields:
  - note: |
      Choose the court division and the county court where you will file your form. 
      
      If there's an existing court case, choose the division and county that the case is in. Look at the papers from the court.
      
      Not sure what county you are in? [Check this list of cities and towns to find the county.](https://en.m.wikipedia.org/wiki/List_of_municipalities_in_Vermont#Cities)

  - "Division": trial_court_division
    input type: radio
    choices:
      - Family court: family
      - Civil court: civil
      - Probate court: probate

  - County: trial_court_index
    code: all_courts._load_courts()['address_county'].items()
    

---
id: does user have a lawyer
question: |
  Do you have a lawyer working with you on this case?
fields:
  - no label: user_has_attorney
    datatype: yesnoradio
  - "Your lawyer's name": users1_attorneys_name
    maxlength: 38
    show if: user_has_attorney

---
id: how many other parties
question: |
  The other party
fields:  
  - note: |
      % if defined("users1_role") and users1_role == "role_plaintiff":
      How many defendants are in this case? 
      % endif
      % if defined("users1_role") and users1_role == "role_defendant":
      How many plaintiffs are in this case?
      % endif
    
  - "How many?": other_parties.target_number
    datatype: integer    
---  
id: gather other parties info
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].address.address  
  - other_parties[i].served
question: |
  % if other_parties.target_number == 1:
  About the other party
  % elif other_parties.target_number > 1:
  About the **${ ordinal(i) }** other party
  % else:
  About the other party
  % endif
fields:
  - First Name: other_parties[i].name.first
  - Middle Name: other_parties[i].name.middle
    required: False
  - Last Name: other_parties[i].name.last
  - Suffix: other_parties[i].name.suffix
    choices: 
      - Jr
      - Sr
      - I
      - II
      - III
    required: False
  - note: |
      ---
  - I am serving (sending or delivering) documents to them: other_parties[i].served
    datatype: yesnoradio
  - Address: other_parties[i].address.address
    address autocomplete: True
    show if: other_parties[i].served
  - Unit: other_parties[i].address.unit
    show if: other_parties[i].served
    required: False
  - City: other_parties[i].address.city
    show if: other_parties[i].served
  - State: other_parties[i].address.state
    code: |
      states_list()
    default: VT
    show if: other_parties[i].served
  - Zip code: other_parties[i].address.zip
    show if: other_parties[i].served
  - note: |
      ---
  - How you will serve them?: other_parties[i].method
    datatype: radio
    choices: 
      - First-class US mail: first_class_mail
      - Personal delivery / hand delivery: personal_delivery
      - Another way: other_delivery
    show if: other_parties[i].served
  - What is the other way you will serve the documents?: other_parties[i].describe_other_delivery
    maxlength: 40
    show if:
      variable: other_parties[i].method
      is: other_delivery
---
id: how many other people will receive service
generic object: DAList
question: |
  Number of other people you will serve
subquestion: |
  % if other_parties.target_number > 1:
  Besides the other parties, how many **other** people are you serving documents to? (Example: the other party's lawyer.)
  % else:
  Besides the other party, how many **other** people are you serving documents to? (Example: the other party's lawyer.)
  % endif
fields: 
  - How many **other** people are you serving?: other_people_receiving_service.target_number
    datatype: integer
---
id: gather info on people receiving service
generic object: DAList
question: |
  % if hasattr(other_people_receiving_service, 'ask_number') and other_people_receiving_service.ask_number and other_people_receiving_service.target_number == 1:
  The other person you are serving
  % else:
  The **${ ordinal(i) }** other person you are serving
  % endif
  
fields:
  - Their name: other_people_receiving_service[i].name
    maxlength: 40
  - How you will serve them: other_people_receiving_service[i].method
    datatype: radio
    choices: 
      - First-class US mail: first_class_mail
      - Personal delivery / hand delivery: personal_delivery
      - Another way: other_delivery
  - What is the other way you will serve the documents?: other_people_receiving_service[i].describe_other_delivery
    maxlength: 40
    show if:
      variable: other_people_receiving_service[i].method
      is: other_delivery
  - Enter their address on one line: other_people_receiving_service[i].address
    maxlength: 80 

---
id: documents serving to other party
question: |
  Documents you are serving to the other party
subquestion: |
  Here are some popular court documents. Choose all that you want to appear on the Certificate of Service form.
      
  On the next screen, you can add more to the list.
fields:      
  - raw html: |
      ${ start_accordion('Common family court documents') }
  - Summons and Complaint for Divorce/Separation/Dissolution without Children - form 400-00836: divorcesc
    datatype: yesno
    required: False
  - Summons and Complaint for Divorce/Separation/Dissolution **with** Children - form 400-00836: divorcesckids
    datatype: yesno
    required: False
  - Notice of Appearance for Self-Represented Party - form 400-00831: noa
    datatype: yesno
    required: False
  - Family Court Information Sheet - form 800: faminfo
    datatype: yesno
    required: False
  - Divorce / Dissolution stipulation (agreement): divorcestip
    datatype: yesno
    required: False
  - Motion to Modify Child Support and/or Maintenance Supplement - form 400-00803: modchildsup
    datatype: yesno
    required: False
  - Motion to Enforce Child Support and/or Maintenance Supplement - form 400-00823: enfchildsup 
    datatype: yesno
    required: False    
  - Motion to Modify Parental Rights & Responsibilities & Parent Child Contact - form 400-00843: modprr
    datatype: yesno
    required: False    
  - Motion to Enforce - form 400-00905: motionenforce
    datatype: yesno
    required: False    
  - Affidavit - Family Division - form 400-00804: familyaffidavit
    datatype: yesno
    required: False   
  - Application to Waive Filing Fees and Service Costs - form 600-00228: feewaiver
    datatype: yesno
    required: False
   
  - raw html: |
      ${ next_accordion('Common civil court documents') }
  - Small Claims Complaint – form 100-00257: smallclaimssc
    datatype: yesno
    required: False
  - Foreclosure Answer: answer
    datatype: yesno
    required: False
  - Answer (other): answer
    datatype: yesno
    required: False
  - Counterclaims: counterclaims
    datatype: yesno
    required: False
  - Motion - Civil Court - form 100-00053: civilmotion
    datatype: yesno
    required: False   
  - Response to Motion - Civil Court - form 100-00020: civilrespmotion
    datatype: yesno
    required: False  
  - Application to Waive Filing Fees and Service Costs - form 600-00228: feewaiver2
    datatype: yesno
    required: False

  - raw html: |
      ${ next_accordion('Common probate court documents') }
  - Petition to Open Small Estate - form 700-00001SM: probpetsmest
    datatype: yesno
    required: False  
  - Petition to Open Decedent's Estate - form 700-00001: probpetopenest
    datatype: yesno
    required: False  
  - List of Interested Persons for Estates - form 700-00002E: probintpersons
    datatype: yesno
    required: False     
  - Motion for License to Sell or Convey Real Estate - form 700-00035: problicsellre
    datatype: yesno
    required: False  
  - Application to Waive Filing Fees and Service Costs - form 600-00228: feewaiver3
    datatype: yesno
    required: False
  - raw html: |
      ${ end_accordion() }  

---
id: other documents serving to other party
question: |
  Other documents you are serving
subquestion: |

  Don't include any you may have checked off the previous screen.
  
  Leave these blank if you have no other documents to list.

fields:
  - "Document:": document1_name
    maxlength: 86
    required: False

  - "Document:": document2_name
    maxlength: 86
    required: False

  - "Document:": document3_name
    maxlength: 86
    required: False

  - "Document:": document4_name
    maxlength: 86
    required: False

  - I have more to list: more_docs
    datatype: yesno
    required: False
    
  - "Document:": document5_name
    maxlength: 86
    required: False
    show if: more_docs

  - "Document:": document6_name
    maxlength: 86
    required: False
    show if: more_docs

  - "Document:": document7_name
    maxlength: 86
    required: False
    show if: more_docs

  - "Document:": document8_name
    maxlength: 86
    required: False
    show if: more_docs
---
id: preview VTCertificateOfService
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit your answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_VTCertificateOfService'), label='Edit your answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: VTCertificateOfService_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
id: signature date
question: |
  Signature date
fields:
  - "Date of your signature for the form": signature_date
    datatype: date
    required: False
    default: |
      ${ today() }
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: VTCertificateOfService review screen
event: review_VTCertificateOfService
question: |
  Review your answers
subquestion: |  
  ${ review_screen_instructions }
review:
  - Edit: 
    - trial_court_division
    - recompute:
      - trial_court
    button: |
      Your court case is in: **${( trial_court.address.county )} County**
      
      In this court division:
      % if trial_court_division == "family":
      **Family**
      % endif
      % if trial_court_division == "probate":
      **Probate**
      % endif
      % if trial_court_division == "civil":
      **Civil**
      % endif
  - Edit: docket_number
    button: |
      Case number / docket number: 
      % if docket_number != '':
      **${ showifdef("docket_number") }**
      % else:
      **Unknown**
      % endif
  - Edit: users.revisit
    button: |
      About you:
      % for item in users:
      **${ item }**
      % endfor
  - Edit: user_has_attorney
    button: |
      Do you have a lawyer for this case?
      **${ word(yesno(user_has_attorney)) }** 
      % if user_has_attorney:
      ; **${ showifdef("users1_attorneys_name") }**
      % endif
  - Edit: users1_role
    button: |
      Your role in this case:
      % if users1_role == "role_plaintiff":
      **Plaintiff**
      % else:
      **Defendant**
      % endif
  - Edit: other_parties.revisit
    button: |
      About the other party/parties in this case (edit name, service information, and address (if applicable)):
      % for item in other_parties:
      
      * **${ item }**
      % endfor
  - Edit: other_people_receiving_service.revisit
    button: |-
      About the other people you are serving the documents to (edit name, address, delivery method):

      % for item in other_people_receiving_service:
      * **${ item }**
      % endfor

  - Edit: divorcesc
    button: |

      Documents you are serving to the other party:
      
      % if defined("divorcesc") and divorcesc == True:
      - Summons and Complaint for Divorce/Separation/Dissolution without Children - form 400-00836
      % endif
      
      % if defined("divorcesckids"):
      - Summons and Complaint for Divorce/Separation/Dissolution with Children - form 400-00836
      % endif
      
      % if defined("noa") and noa == True:
      - Notice of Appearance for Self-Represented Party - form 400-00831
      % endif
      
      % if defined("faminfo") and faminfo == True:
      - Family Court Information Sheet - form 800
      % endif
      
      % if defined("divorcestip") and divorcestip == True:
      - Divorce / Dissolution stipulation (agreement)
      % endif

      % if defined("modchildsup") and modchildsup == True:
      - Motion to Modify Child Support and/or Maintenance Supplement - form 400-00803
      % endif
      
      % if defined("enfchildsup") and enfchildsup == True:
      - Motion to Enforce Child Support and/or Maintenance Supplement - form 400-00823
      % endif
      
      % if defined("modprr") and modprr == True:
      - Motion to Modify Parental Rights & Responsibilities & Parent Child Contact - form 400-00843
      % endif
      
      % if defined("motionenforce") and motionenforce == True:
      - Motion to Enforce - form 400-00905
      % endif
      
      % if defined("familyaffidavit") and familyaffidavit == True:
      - Affidavit - Family Division - form 400-00804
      % endif
      
      % if defined("feewaiver") and feewaiver == True:
      - Application to Waive Filing Fees and Service Costs - form 600-00228
      % endif

  - Edit: document1_name
    button: |
      Other documents you are serving:
      % if not document1_name != '':
      **No other documents listed.**
      % endif
      
      % if document1_name != '':
      * ${ showifdef("document1_name") }
      % endif
      % if document2_name != '':
      * ${ showifdef("document2_name") }
      % endif
      % if document3_name != '':      
      * ${ showifdef("document3_name") }
      % endif
      % if document4_name != '':            
      * ${ showifdef("document4_name") }
      % endif

  - Edit: signature_date
    button: |
      Date of signature:
      **${ format_date(signature_date, format='M/d/yyyy') }**
---
continue button field: other_people_receiving_service.revisit
question: |
  Edit the other people being served

subquestion: |
  ${ other_people_receiving_service.table }

  ${ other_people_receiving_service.add_action() }
---
table: other_people_receiving_service.table
rows: other_people_receiving_service
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name") else ""
  - Address: |
      row_item.address if defined("row_item.address") else ""
  - How serving them: |
      row_item.method if row_item.method in ["personal_delivery", "first_class_mail"] else row_item.describe_other_delivery if row_item.method == "other_delivery" else ""
edit:
  - name.first
  - address
  - method
  - describe_other_delivery
confirm: True
---
continue button field: users.revisit
question: |
  Edit info about you
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - signature
confirm: True
---
continue button field: other_parties.revisit
question: |
  Edit info about the other party in this case
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name") else ""
  - Address: |
      row_item.address if defined("row_item.address") else ""
  - How serving them: |
      row_item.method if row_item.method in ["personal_delivery", "first_class_mail"] else row_item.describe_other_delivery if row_item.method == "other_delivery" else ""
edit:
  - name.first
  - address
  - method
  - describe_other_delivery
confirm: True

---
id: download VTCertificateOfService
event: VTCertificateOfService_download
question: |
  Review your forms and download and/or print them
subquestion: |
  ${ download_screen_instructions }

  ${ action_button_html(url_action('review_VTCertificateOfService'), label='Edit your answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }
  
  ${ download_screen_bottom_instructions }
  
  ${ collapse_template(not_seeing_email) }
  ${ collapse_template(log_out_when_done) }
progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - VTCertificateOfService_Post_interview_instructions: ALDocument.using(title="Instructions", filename="VTCertificateOfService_next_steps.docx", enabled=True, has_addendum=False)
  - VTCertificateOfService_attachment: ALDocument.using(title="Certificate of Service", filename="VTCertificateOfService", enabled=True, has_addendum=True, )
---
code: |
  VTCertificateOfService_attachment.overflow_fields['documents_list'].overflow_trigger = 1200
  VTCertificateOfService_attachment.overflow_fields['documents_list'].label = "More documents served"
  VTCertificateOfService_attachment.overflow_fields.gathered = True 
---
attachment:
  variable name: VTCertificateOfService_attachment.addendum
  docx template file: VTCertificateOfService_addendum.docx
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[VTCertificateOfService_Post_interview_instructions, VTCertificateOfService_attachment], filename="VTCertificateOfService", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[VTCertificateOfService_attachment],  filename="VTCertificateOfService", title="All forms to deliver to court", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: VTCertificateOfService_next_steps
  docx template file: VTCertificateOfService_next_steps.docx
  variable name: VTCertificateOfService_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: VTCertificateOfService
  filename: G certificate of service
  variable name: VTCertificateOfService_attachment[i]
  skip undefined: True
  pdf template file: G_certificate_of_service.pdf
  fields:
      - "trial_court_division": |
          % if trial_court_division == "family":
          FAMILY 
          % endif
          % if trial_court_division == "probate":
          PROBATE 
          % endif
          % if trial_court_division == "civil":
          CIVIL 
          % endif
      - "docket_number": ${ docket_number }
      - "trial_court_county": ${(trial_court.address.county)}
      - "users1_name": |
          % if defined("users1_role") and users1_role == "role_plaintiff":
          ${ users[0] }
          % endif
          % if defined("users1_role") and users1_role == "role_defendant":
          ${ other_parties.short_list(2) }
          % endif
      - "VS": "v."
      - "other_parties1_name": |
          % if defined("users1_role") and users1_role == "role_defendant":
          ${ users[0] }
          % endif
          % if defined("users1_role") and users1_role == "role_plaintiff":
          ${ other_parties.short_list(2) }
          % endif

      - "documents_list": |
          % if defined("divorcesc") and divorcesc == True:
          - Summons and Complaint for Divorce/Separation/Dissolution without Children - form 400-00836
          % endif
          % if defined("divorcesckids") and divorcesckids == True:
          - Summons and Complaint for Divorce/Separation/Dissolution with Children - form 400-00836
          % endif
          % if defined("noa") and noa == True:
          - Notice of Appearance for Self-Represented Party - form 400-00831
          % endif
          % if defined("faminfo") and faminfo == True:
          - Family Court Information Sheet - form 800
          % endif
          % if defined("divorcestip") and divorcestip == True:
          - Divorce / Dissolution stipulation (agreement)
          % endif
          % if defined("modchildsup") and modchildsup == True:
          - Motion to Modify Child Support and/or Maintenance Supplement - form 400-00803
          % endif
          % if defined("enfchildsup") and enfchildsup == True:
          - Motion to Enforce Child Support and/or Maintenance Supplement - form 400-00823
          % endif
          % if defined("modprr") and modprr == True:
          - Motion to Modify Parental Rights & Responsibilities & Parent Child Contact - form 400-00843
          % endif
          % if defined("motionenforce") and motionenforce == True:
          - Motion to Enforce - form 400-00905
          % endif
          % if defined("familyaffidavit") and familyaffidavit == True:
          - Affidavit - Family Division - form 400-00804
          % endif
          % if defined("feewaiver") and feewaiver == True:
          - Application to Waive Filing Fees and Service Costs - form 600-00228
          % endif

      - "people_receiving_service_list": |
          % if other_parties[0].served == True:
          - ${ other_parties[0] }, ${ other_parties[0].address.on_one_line() }
          % endif
          % if defined("other_parties[1]") and other_parties[1].served == True:
          - ${ other_parties[1] }, ${ other_parties[1].address.on_one_line() }
          % endif
          % if defined("other_parties[2]") and other_parties[2].served == True:
          - ${ other_parties[2].address.on_one_line() }
          % endif
          % if defined("other_parties[3]") and other_parties[3].served == True:
          - ${ other_parties[3] }
          % endif
          % if defined("other_parties[4]") and other_parties[4].served == True:
          - ${ other_parties[4] }
          % endif
          % if defined("other_people_receiving_service[0]"):
          - ${ other_people_receiving_service[0].name }, ${ other_people_receiving_service[0].address }
          % endif
          % if defined("other_people_receiving_service[1]"):
          - ${ other_people_receiving_service[1].name }, ${ other_people_receiving_service[1].address }
          % endif
          % if defined("other_people_receiving_service[2]"):
          - ${ other_people_receiving_service[2].name }, ${ other_people_receiving_service[2].address }
          % endif
          % if defined("other_people_receiving_service[3]"):
          - ${ other_people_receiving_service[3].name }, ${ other_people_receiving_service[3].address }
          % endif
          % if defined("other_people_receiving_service[4]"):
          - ${ other_people_receiving_service[4].name }, ${ other_people_receiving_service[4].address }
          % endif          

      - "first_class_mail": |
          ${ any(other.method == "first_class_mail" for other in other_people_receiving_service) or any(other_party.method == "first_class_mail" for other_party in other_parties) }
          
      - "personal_delivery": |
          ${ any(other.method == "personal_delivery" for other in other_people_receiving_service) or any(other_party.method == "personal_delivery" for other_party in other_parties) }
          
      - "other_delivery": |
          ${ any(other.method == "other_delivery" for other in other_people_receiving_service) or any(other_party.method == "other_delivery" for other_party in other_parties) }

      - "describe_other_delivery": |
          ${ ", ".join([ other.describe_other_delivery for other in other_people_receiving_service if other.method == "other_delivery"] + [ other_party.describe_other_delivery for other_party in other_parties if other_party.method == "other_delivery"]) }
      
      - "person_getting_delivery": |
          ${ next((person.name for person in other_people_receiving_service if person.method == "personal_delivery"), next((party for party in other_parties if party.method == "personal_delivery"), None)) }

      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_name__1": ${ users[0] }
      - "users1_attorneys_name": ${ users1_attorneys_name }



