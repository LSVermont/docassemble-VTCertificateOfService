#Need to show descriptive labels for this   - How serving them: |     row_item.method if defined("row_item.method") else ""
#How can I  reconsider("document1 name") so people can add or subtract things from their original list?
#Why does this appear at end of interview after I have edited? id: any other opposing parties  Sometimes I also see any other users?
#Add overflow for the documents list -- have room for 6 documents so only offer 6 in the main lists, then make others go on overflow?
#Can't edit everything in review screen
#Need to offer more names of common court documents that a person might check off (family, probate and civil). Then, also give them option to write in others. Need to do an overflow addendum for that.
#Need an overflow addendum for served names and addresses

---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.VTSharedYMLFile:VTSharedYMLFile.yml

---
metadata:
  title: >-
    Certificate of Service
  short title: >-
    Certificate of Service
  description: |-
    This interview helps someone in Vermont fill out a Certificate of Service court form.
  tags:
    - "FA-06-00-00-00"
  authors:
    - Legal Services Vermont
  original_form:
    - https://vtlawhelp.org/roadmap/divorce/step-3
  help_page_url: >-
    https://vtlawhelp.org/roadmap/divorce/step-3
  help_page_title: >-
    Divorce Roadmap on VTLawHelp.org
  typical_role: "plaintiff"
  al_weaver_version: "1.10.3"
  generated_on: "2024-02-22"
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "VT"
---
code: |
  github_repo_name =  'docassemble-Vtcertificateofservice'
---
code: |
  interview_short_title = "Fill out a Certificate of Service form in Vermont"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - other_parties: ALPeopleList.using(ask_number=True,target_number=1)
  - people_receiving_service: DAList.using(object_type=Thing, ask_number=True, complete_attribute='complete')
  
---
code: |
  people_receiving_service[i].method
  people_receiving_service[i].complete = True
---
# customized feedback form
code: |   
  feedback_form = "docassemble.VTFeedback:VTfeedback.yml"
---
sections:
  - review_VTCertificateOfService: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_VTCertificateOfService
code: |
  nav.set_section("review_VTCertificateOfService")
  user_role = "plaintiff"
  user_ask_role = "plaintiff"
  docket_number
  trial_court_division
  set_progress(20)
  users.gather()
  user_has_lawyer
  set_parts(subtitle=str(users))
  other_parties[0].name.last
  set_progress(40)
  if trial_court_division == "family":
    divorcesc
    if otherdocs:
      document1_name   
  else:
      document1_name
  people_receiving_service.gather()
  signature_date
  #Needed to add trial court county below so it would be defined before previewing forms. The index had been defined but not the county.
  trial_court.address.county
  VTCertificateOfService_preview_question
  al_form_requires_digital_signature = False
  basic_questions_signature_flow 
  interview_order_VTCertificateOfService = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  VTCertificateOfService_intro
  interview_order_VTCertificateOfService
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  VTCertificateOfService_download
---
id: basic questions intro screen
decoration: form-lineal
question: |
  **${interview_short_title}**
subquestion: |  

  <p>${ intro_vtcourtforms_3_steps }</p>
  
  <i class="fas fa-file-text fa-2x"></i> This interview produces the Certificate of Service - form 600-00264. It's used in many kinds of court cases to show the court that you "served" documents (sent them or delivered them) to the other party in your case.
  
  Before you start, be sure you have:
  
  * the names and address of the other party, or their lawyer if they have one
  * the names of the documents or forms you are sending or have sent.
  
  <i class="fas fa-clock fa-2x"></i> It may take you 10 minutes to complete this interview.
  
  <i class="fas fa-circle-info fa-2x"></i> It is free to use this program. This site is not a lawyer. Visit our [VTLawHelp.org website](https://vtlawhelp.org/roadmap/divorce/step-1) for more information about divorce, separation, or civil union dissolution.

  <p>${ intro_vtcourtforms_created_by }</p>

fields:
  - To continue, please accept our [terms of use](https://vtlawhelp.org/vlh-privacy).: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: al_intro_screen
---
comment: |
  This question is used to introduce your interview. Please customize
id: Certificate_of_Service
continue button field: VTCertificateOfService_intro
question: |
  Certificate of Service
subquestion: |
  This interview will help you fill out a Certificate of Service form in Vermont.
  
  It's important to know the rules for sending or delivering documents for your kind of case.
  
  * [For family court cases: Read this information.](https://www.vermontjudiciary.org/family/divorce/serving-papers)
  
  * For civil court cases:
  
  * For probate cases:
  
---
id: choose a court
question: |
  Choose a court
fields:
  - note: |
      Choose the court division and the county court where you will file your forms. 
      
      If there's an existing court case, choose the division and county that the case is in. Look at the papers from the court.
      
      Not sure what county you are in? [Check this list of cities and towns to find the county.](https://en.m.wikipedia.org/wiki/List_of_municipalities_in_Vermont#Cities)

  - "Division": trial_court_division
    input type: radio
    choices:
      - Family court: family
      - Civil court: civil
      - Probate court: probate

  - County: trial_court_index
    code: all_courts._load_courts()['address_county'].items()
    

---
id: does user have a lawyer
question: |
  Do you have a lawyer working with you on this case?
fields:
  - no label: user_has_lawyer
    datatype: yesnoradio
  - "Your lawyer's name": users1_attorneys_name
    maxlength: 38
    show if: user_has_lawyer
---
---
id: gather defendant name
sets:
  - other_parties[0].name.first
  - other_parties[0].name.last
question: |
  Name of the other party
fields:
  - First Name: other_parties[0].name.first
  - Middle Name: other_parties[0].name.middle
    required: False
  - Last Name: other_parties[0].name.last
  - Suffix: other_parties[0].name.suffix
    choices: 
      - Jr
      - Sr
      - I
      - II
      - III
    required: False

---
id: family documents serving to other party
question: |
  What documents are you serving to the other party?
fields:
  - note: |
      Choose all that apply.
  - Summons and Complaint for Divorce/Separation/Dissolution without Children - form 400-00836: divorcesc
    datatype: yesno
    required: False
  - Summons and Complaint for Divorce/Separation/Dissolution **with** Children - form 400-00836: divorcesckids
    datatype: yesno
    required: False
  - Notice of Appearance: noa
    datatype: yesno
    required: False
  - Family Court Information Sheet - form 800: faminfo
    datatype: yesno
    required: False
  - Divorce stipulation (agreement): divorcestip
    datatype: yesno
    required: False
  - None of the above: no_docs_above
    datatype: yesno
    required: False
  - Other documents that I want to list: otherdocs
    datatype: yesno
    required: False
---
id: other documents serving to other party
question: |
  List the documents you are serving
subquestion: |
  % if no_docs_above:
  
  % else:
  Don't include any you may have checked off on the other screen.
  % endif
fields:
  - "Document:": document1_name
    maxlength: 86

  - "Document:": document2_name
    maxlength: 86
    required: False

  - "Document:": document3_name
    maxlength: 86
    required: False

  - "Document:": document4_name
    maxlength: 86
    required: False

---
id: how many people will receive service
generic object: DAList
question: |
  Number of people you will serve
fields: 
  - How many people will you send or give the documents to?: people_receiving_service.target_number
    datatype: integer
---
id: gather info on people receiving service
generic object: DAList
question: |
  % if hasattr(people_receiving_service, 'ask_number') and people_receiving_service.ask_number and people_receiving_service.target_number == 1:
  The person you are serving
  % else:
  The ordinal person you are serving
  % endif
  
fields:
  - Their name: people_receiving_service[i].name
    maxlength: 40
  - How you will serve them: people_receiving_service[i].method
    datatype: radio
    choices: 
      - First-class US mail: first_class_mail
      - Personal delivery / hand delivery: personal_delivery
      - Another way: other_delivery
  - What is the other way you will serve the documents?: describe_other_delivery
    maxlength: 40
    show if:
      variable: people_receiving_service[i].method
      is: other_delivery
  - Their address -- on one line: people_receiving_service[i].address
    maxlength: 80

---
#id: Who you are sending the documents to
#question: |
#  Who you are sending the documents to
#fields:
#  - "Person receiving service": people_receiving_service
#    maxlength: 20
#  - "Other parties1 address address": Other_parties1_address_address
#    maxlength: 39
---
id: preview VTCertificateOfService
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit your answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_VTCertificateOfService'), label='Edit your answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: VTCertificateOfService_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
id: signature date
question: |
  Signature date
fields:
  - "Date of your signature for the form": signature_date
    datatype: date
    required: False
    default: |
      ${ today() }
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: VTCertificateOfService review screen
event: review_VTCertificateOfService
question: |
  Review your answers
subquestion: |  
  ${ review_screen_instructions }
review:
  - Edit: trial_court_index
    button: |
      Your court case is in: **${(trial_court.address.county)} County**
      
      In this court division:
      % if trial_court_division == "family":
      **Family**
      % endif
      % if trial_court_division == "probate":
      **Probate**
      % endif
      % if trial_court_division == "civil":
      **Civil**
      % endif
  - Edit: docket_number
    button: |
      Case number / docket number: 
      % if docket_number != '':
      **${ showifdef("docket_number") }**
      % else:
      **Unknown**
      % endif
  - Edit: users.revisit
    button: |
      You and your signature:
      % for item in users:
      **${ item }**
      % endfor
  - Edit: user_has_lawyer
    button: |
      Have a lawyer working with you on this case?
      **${ word(yesno(user_has_lawyer)) }** 
      % if user_has_lawyer:
      ; **${ showifdef("users1_attorneys_name") }**
      % endif
  - Edit: other_parties.revisit
    button: |
      Other party in this case:
      % for item in other_parties:
      **${ item }**
      % endfor
  - Edit: otherdocs
    button: |
      % if no_docs_above:
      
      % else:
      Documents you are serving to the other party:
      
      % endif
      % if divorcesc:
        * Summons and Complaint for Divorce/Separation/Dissolution without Children - form 400-00836
      % endif
      % if divorcesckids:
        * Summons and Complaint for Divorce/Separation/Dissolution with Children - form 400-00836
      % endif
      % if noa:
        * Notice of Appearance
      % endif
      % if faminfo:
        * Family Court Information Sheet - form 800
      % endif
      % if divorcestip:
        * Divorce stipulation
      % endif

  - Edit: document1_name
    button: |
      % if no_docs_above:
      Documents you are serving to the other party:
      % else:
      Also serving these:
      % endif
      
      % if document1_name != '':
      * ${ showifdef("document1_name") }
      % endif
      % if document2_name != '':
      * ${ showifdef("document2_name") }
      % endif
      % if document3_name != '':      
      * ${ showifdef("document3_name") }
      % endif
      % if document4_name != '':            
      * ${ showifdef("document4_name") }
      % endif


  - Edit: people_receiving_service.revisit
    button: |-
      About the people you are serving the documents to (edit name, address, delivery method):

      % for item in people_receiving_service:
      * **${ item }**
      % endfor
  - Edit: describe_other_delivery
    button: |
      Describe the other delivery method you mentioned:
      **${ describe_other_delivery }**

  - Edit: signature_date
    button: |
      Date of signature:
      **${ format_date(signature_date, format='M/d/yyyy') }**
---
continue button field: people_receiving_service.revisit
question: |
  Edit the people being served

subquestion: |
  ${ people_receiving_service.table }

  ${ people_receiving_service.add_action() }
---
table: people_receiving_service.table
rows: people_receiving_service
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name") else ""
  - Address: |
      row_item.address if defined("row_item.address") else ""
  - How serving them: |
      row_item.method if defined("row_item.method") else ""  
edit:
  - name.first
  - address
  - method
confirm: True
---
continue button field: users.revisit
question: |
  Edit info about you
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - signature
confirm: True
---
continue button field: other_parties.revisit
question: |
  Edit info about the other party in this case
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
id: download VTCertificateOfService
event: VTCertificateOfService_download
question: |
  Review your forms and download and/or print them
subquestion: |
  ${ download_screen_instructions }

  ${ action_button_html(url_action('review_VTCertificateOfService'), label='Edit your answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }
  
  ${ download_screen_bottom_instructions }
  
  ${ collapse_template(not_seeing_email) }
  ${ collapse_template(log_out_when_done) }
progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - VTCertificateOfService_Post_interview_instructions: ALDocument.using(title="Instructions", filename="VTCertificateOfService_next_steps.docx", enabled=True, has_addendum=False)
  - VTCertificateOfService_attachment: ALDocument.using(title="Certificate of Service", filename="VTCertificateOfService", enabled=True, has_addendum=False, )
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[VTCertificateOfService_Post_interview_instructions, VTCertificateOfService_attachment], filename="VTCertificateOfService", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[VTCertificateOfService_attachment],  filename="VTCertificateOfService", title="All forms to deliver to court", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: VTCertificateOfService_next_steps
  docx template file: VTCertificateOfService_next_steps.docx
  variable name: VTCertificateOfService_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: VTCertificateOfService
  filename: G certificate of service
  variable name: VTCertificateOfService_attachment[i]
  skip undefined: True
  pdf template file: G_certificate_of_service.pdf
  fields:
      - "trial_court_division": |
          % if trial_court_division == "family":
          FAMILY 
          % endif
          % if trial_court_division == "probate":
          PROBATE 
          % endif
          % if trial_court_division == "civil":
          CIVIL 
          % endif
      - "docket_number": ${ docket_number }
      - "trial_court_county": ${(trial_court.address.county)}
      - "VS": "v."
      - "users1_name": ${ users[0] }
      - "other_parties1_name": ${ other_parties[0] }
      - "people_receiving_service_name_1": "* ${ people_receiving_service[0].name }"
      - "people_receiving_service_address_1": "* ${ people_receiving_service[0].address }"
      - "people_receiving_service_name_2": "* ${ people_receiving_service[1].name }"
      - "people_receiving_service_address_2": "* ${ people_receiving_service[1].address }"
      - "people_receiving_service_name_3": "* ${ people_receiving_service[2].name }"
      - "people_receiving_service_address_3": "* ${ people_receiving_service[2].address }"
      - "people_receiving_service_name_4": "* ${ people_receiving_service[3].name }"
      - "people_receiving_service_address_4": "* ${ people_receiving_service[3].address }"
      - "people_receiving_service_name_5": "* ${ people_receiving_service[4].name }"
      - "people_receiving_service_address_5": "* ${ people_receiving_service[4].address }"
      - "document1_name": |
          % if divorcesc:
            * Summons and Complaint for Divorce/Separation/Dissolution without Children - form 400-00836
          % endif
          % if divorcesckids:
            * Summons and Complaint for Divorce/Separation/Dissolution with Children - form 400-00836
          % endif
          % if noa:
            * Notice of Appearance
          % endif
          % if faminfo:
            * Family Court Information Sheet - form 800
          % endif
          % if divorcestip:
            * Divorce stipulation
          % endif
          % if otherdocs:
            % if document1_name != '':
            * ${ showifdef("document1_name") }
            % endif
            % if document2_name != '':
            * ${ showifdef("document2_name") }
            % endif
            % if document3_name != '':
            * ${ showifdef("document3_name") }
            % endif
            % if document4_name != '':
            * ${ showifdef("document4_name") }
            % endif
          % endif
      - "people_receiving_service": |
          % for item in people_receiving_service:
            * ${ item }
          % endfor
      - "first_class_mail": |
          % if people_receiving_service[0].method == "first_class_mail":
          True
          % elif people_receiving_service[1].method == "first_class_mail":
          True
          % elif people_receiving_service[2].method == "first_class_mail":
          True
          % elif people_receiving_service[3].method == "first_class_mail":
          True
          % elif people_receiving_service[4].method == "first_class_mail":
          True
          % else:
          False
          % endif
      - "personal_delivery": |
          % if people_receiving_service[0].method == "personal_delivery":
          True
          % elif people_receiving_service[1].method == "personal_delivery":
          True
          % elif people_receiving_service[2].method == "personal_delivery":
          True
          % elif people_receiving_service[3].method == "personal_delivery":
          True
          % elif people_receiving_service[4].method == "personal_delivery":
          True
          % else:
          False
          % endif
      - "other_delivery": |
          % if people_receiving_service[0].method == "other_delivery":
          True
          % elif people_receiving_service[1].method == "other_delivery":
          True
          % elif people_receiving_service[2].method == "other_delivery":
          True
          % elif people_receiving_service[3].method == "other_delivery":
          True
          % elif people_receiving_service[4].method == "other_delivery":
          True
          % else:
          False
          % endif
      - "describe_other_delivery": ${ describe_other_delivery }
      - "person_getting_delivery": |
          % if people_receiving_service[0].method == "personal_delivery":
          ${ people_receiving_service[0] }
          % elif people_receiving_service[1].method == "personal_delivery":
          ${ people_receiving_service[1] }
          % elif people_receiving_service[2].method == "personal_delivery":
          ${ people_receiving_service[2].name }
          % elif people_receiving_service[3].method == "personal_delivery":
          ${ people_receiving_service[3].name }
          % elif people_receiving_service[4].method == "personal_delivery":
          ${ people_receiving_service[4].name }          
          % endif
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_name__1": ${ users[0] }
      - "users1_attorneys_name": ${ users1_attorneys_name }



